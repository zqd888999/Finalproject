package schema;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.LinkedList;
import java.util.List;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Date;
import java.text.DateFormat;
import java.text.SimpleDateFormat;

import org.bson.Document;
import org.bson.conversions.Bson;
import com.mongodb.MongoClient;
import com.mongodb.MongoCredential;
import com.mongodb.ServerAddress;
import com.mongodb.client.FindIterable;
import com.mongodb.client.MongoCollection;
import com.mongodb.client.MongoDatabase;
import com.mongodb.client.model.Filters;

public class PolyglotDatabase {

	public class Mysql{
		protected  Connection conn;
		
		public Mysql(String url, String username, String password) {
			 try {
					Class.forName("com.mysql.jdbc.Driver");
				} catch (ClassNotFoundException e) {
					e.printStackTrace();
				}
			 try {
					conn = DriverManager.getConnection(url,username,password);
				} catch (SQLException e) {
					e.printStackTrace();
				}
		}
		
		public boolean runSQL(String sql) {
			Statement stmt;
			try {
				stmt = conn.createStatement();
				int result;
				result = stmt.executeUpdate(sql);
				if (result != -1) 
					return true;
				else
					return false;
			} catch (SQLException e) {
				e.printStackTrace();
			} 
			return false;
		}
		
		public boolean TableIsExit(String table) {
			Statement stmt;
			try {
				String sql = "show tables like \""+table+"\"";
				stmt = conn.createStatement();
				ResultSet resultSet = stmt.executeQuery(sql);
				if (resultSet.next()) 
					return true;
				else
					return false;
			} catch (SQLException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			} 
			return false;
		}
        
		public ResultSet  findTable(String name) {
			String sql = "SELECT * FROM "+name;
			Statement stmt;
			try {
				stmt = conn.createStatement();
				if(TableIsExit(name))
					return stmt.executeQuery(sql);
				else
					return null;
			} catch (SQLException e) {
				e.printStackTrace();
			}
			return null;
		}
	}
	
	[%for(d in s.databases){
	if(d.databasetype.value =0){%]
	protected Mysql mysql_[%=d.name%];
	[%}if(d.databasetype.value =2){%]
	protected MongoDatabase mongo_[%=d.name%];
	[%}}%]

	public PolyglotDatabase(){
	[%for(d in s.databases){
	if(d.databasetype.value =0){%]
		String url = "jdbc:mysql://[%=d.host%]:[%=d.port%]/[%=d.name%]?serverTimezone=GMT";
		mysql_[%=d.name%] = new Mysql(url,"[%=d.user%]","[%=d.password%]");
	[%}}%]

	[%for(d in s.databases){
	if(d.databasetype.value =2){
		if(d.user = null){%]
		MongoClient mongoClient = new MongoClient( "[%=d.host%]" , [%=d.port%] );
		mongo_[%=d.name%]= mongoClient.getDatabase("[%=d.name%]");
	[%}else{%]
		ServerAddress serverAddress = new ServerAddress("[%=d.host%]",[%=d.port%]);  
		List<ServerAddress> addrs = new ArrayList<ServerAddress>();  
		addrs.add(serverAddress);  
   
		MongoCredential credential = MongoCredential.createScramSha1Credential("[%=d.user%]", "[%=d.name%]", "[%=d.password%]".toCharArray());  
		List<MongoCredential> credentials = new ArrayList<MongoCredential>();  
		credentials.add(credential);  
  
		MongoClient mongoClient = new MongoClient(addrs,credentials);
		mongo_[%=d.name%]= mongoClient.getDatabase("[%=d.name%]");
	[%}}}%]
	
	[%for(e in s.entities){
	if(e.database.databasetype.value =0){%]
		if(!mysql_[%=e.database.name%].TableIsExit("[%=e.name%]")) 
			mysql_[%=e.database.name%].runSQL("CREATE TABLE [%=e.name%](databaseid int[%for (f in e.fields) 
		{%],[%=f.name%] [%=my(f.type)%][%}
		for(r in e.references){if(r.many =false){%],[%=r.name%] int[%}}%])");
		
	[%}if(e.database.databasetype.value =2){%]
		mongo_[%=e.database.name%].getCollection("[%=e.name%]");
		
	[%}for(r in e.references){
	if(r.many =true and r.correspondence.many = true){
	if(e.database.databasetype.value =0){%]
		if(!mysql_[%=e.database.name%].TableIsExit("[%=r.name%]_[%=e.name%]")) 
			mysql_[%=e.database.name%].runSQL("CREATE TABLE [%=r.name%]_[%=e.name%]([%=r.correspondence.name%] int,[%=r.name%] int[%for (f in r.fields) 
		{%],[%=f.name%] [%=my(f.type)%][%}%])");
			
	[%}if(e.database.databasetype.value =2){%]
		mongo_[%=e.database.name%].getCollection("[%=r.name%]_[%=e.name%]");
		
	[%}}}}%]
	}
	
	[%for(e in s.entities){
	if(e.database.databasetype.value =0){%]
	public [%=e.name%] create[%=e.name.ftuc()%]() {
		ResultSet rs = mysql_[%=e.database.name%].findTable("[%=e.name%]");
		int id =0;
		try {
			while(rs.next())
				id=rs.getInt("databaseid");
			id++;
			[%=e.name%] [%=e.name.toLowerCase()%] = new [%=e.name%](this);
			[%=e.name.toLowerCase()%].setDatabaseID(id);
			mysql_[%=e.database.name%].runSQL("INSERT INTO [%=e.name%](databaseid) VALUES("+id+")");
			return [%=e.name.toLowerCase()%];
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return null;
	}
	
	public void set([%=e.name%] [%=e.name.toLowerCase()%], String name, Object value) {
		if(value ==null)
			mysql_[%=e.database.name%].runSQL("UPDATE [%=e.name%] SET "+name+" = null WHERE databaseid = "+[%=e.name.toLowerCase()%].getDatabaseID());
		else {
			if(value.getClass().getSimpleName().equals("String"))
				mysql_[%=e.database.name%].runSQL("UPDATE [%=e.name%] SET "+name+" = '"+value+"' WHERE databaseid = "+[%=e.name.toLowerCase()%].getDatabaseID());
			if(value.getClass().getSimpleName().equals("Date")){
				java.sql.Date sqlDate = new java.sql.Date(((Date) value).getTime());
				mysql_[%=e.database.name%].runSQL("UPDATE [%=e.name%] SET "+name+" = '"+ sqlDate +"' WHERE databaseid = "+[%=e.name.toLowerCase()%].getDatabaseID());
			}
			if(value.getClass().getSimpleName().equals("Integer") || value.getClass().getSimpleName().equals("Double"))
				mysql_[%=e.database.name%].runSQL("UPDATE [%=e.name%] SET "+name+" = "+value+" WHERE databaseid = "+[%=e.name.toLowerCase()%].getDatabaseID());
		}
	}
	
	public String get([%=e.name%] [%=e.name.toLowerCase()%], String name) {
		ResultSet rs =mysql_[%=e.database.name%].findTable("[%=e.name%]");
		try {
			while(rs.next())
			{
				if(rs.getInt("databaseid")==[%=e.name.toLowerCase()%].getDatabaseID())
					return rs.getString(name);
			}
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return null;
	}

	[%}if(e.database.databasetype.value =2){%]
	public [%=e.name%] create[%=e.name.ftuc()%]() {
		MongoCollection<Document> [%=e.name.toLowerCase()%]s = mongo_[%=e.database.name%].getCollection("[%=e.name%]");
		FindIterable<Document> documents = [%=e.name.toLowerCase()%]s.find();
		int id =0;
		for (Document document : documents) 
		   id = document.getInteger("databaseid");
		id++;
		[%=e.name%] [%=e.name.toLowerCase()%] = new [%=e.name%](this);
		[%=e.name.toLowerCase()%].setDatabaseID(id);
		Document doc = new Document();
	    doc.put("databaseid", id);
	    [%=e.name.toLowerCase()%]s.insertOne(doc);
		return [%=e.name.toLowerCase()%];
	}
	
	public void set([%=e.name%] [%=e.name.toLowerCase()%], String name, Object value) {
		MongoCollection<Document> [%=e.name.toLowerCase()%]s = mongo_[%=e.database.name%].getCollection("[%=e.name%]");
		[%=e.name.toLowerCase()%]s.updateOne(Filters.eq("databaseid", [%=e.name.toLowerCase()%].getDatabaseID()), new Document("$set",new Document(name,value)));	
	}
	
	public String get([%=e.name%] [%=e.name.toLowerCase()%], String name) {
		MongoCollection<Document> [%=e.name.toLowerCase()%]s = mongo_[%=e.database.name%].getCollection("[%=e.name%]");
		FindIterable<Document> documents = [%=e.name.toLowerCase()%]s.find();
		for (Document document : documents) {
		    if(document.getInteger("databaseid")==[%=e.name.toLowerCase()%].getDatabaseID()){
		    	if(document.get(name).getClass().getSimpleName().equals("Date")){
		    		DateFormat format1 = new SimpleDateFormat("yyyy-MM-dd");
					return format1.format(document.get(name));   
		    	}
		    	else
		    		return document.get(name).toString();
		    }
		    	
		}
		return null;
	}
	
	[%}}%]
	[%for(e in s.entities){
		for(r in e.references){
		if(r.correspondence.many = true and r.many =true){
		if(e.database.databasetype.value =0){%]
	public void set[%=r.name.ftuc()%]([%=e.name%] [%=e.name.toLowerCase()%],[%=r.type.name%] [%=r.type.name.toLowerCase()%]){
		mysql_[%=e.database.name%].runSQL("INSERT INTO [%=r.name%]_[%=e.name%]([%=r.correspondence.name%] ,[%=r.name%] ) VALUES("+[%=e.name.toLowerCase()%].getDatabaseID()+","+[%=r.type.name.toLowerCase()%].getDatabaseID()+")");
	}
		
	[%if(r.fields.size>0){
	for(f in r.fields){%]
	public void set([%=e.name%] [%=e.name.toLowerCase()%],int id, String name, Object value) {
		if(value ==null)
			mysql_[%=e.database.name%].runSQL("UPDATE [%=r.name%]_[%=e.name%] SET "+name+" = null WHERE [%=r.correspondence.name%] = "+[%=e.name.toLowerCase()%].getDatabaseID()+" AND [%=r.name%] = " + id );
		else {
			if(value.getClass().getSimpleName().equals("String"))
				mysql_[%=e.database.name%].runSQL("UPDATE [%=r.name%]_[%=e.name%] SET "+name+" = '"+ value +"' WHERE [%=r.correspondence.name%] = "+[%=e.name.toLowerCase()%].getDatabaseID()+" AND [%=r.name%] = " + id );
			if(value.getClass().getSimpleName().equals("Date")){
				java.sql.Date sqlDate = new java.sql.Date(((Date) value).getTime());
				mysql_[%=e.database.name%].runSQL("UPDATE [%=r.name%]_[%=e.name%] SET "+name+" = '"+ sqlDate +"' WHERE [%=r.correspondence.name%] = "+[%=e.name.toLowerCase()%].getDatabaseID()+" AND [%=r.name%] = " + id );
			}
			if(value.getClass().getSimpleName().equals("Integer") || value.getClass().getSimpleName().equals("Double"))
				mysql_[%=e.database.name%].runSQL("UPDATE [%=r.name%]_[%=e.name%] SET "+name+" = "+ value +" WHERE [%=r.correspondence.name%] = "+[%=e.name.toLowerCase()%].getDatabaseID()+" AND [%=r.name%] = " + id );

		}
	}

	public String get([%=e.name%] [%=e.name.toLowerCase()%], int id, String name) {
		ResultSet rs =mysql_[%=e.database.name%].findTable("[%=r.name%]_[%=e.name%]");
		try {
			while(rs.next())
			{
				if(rs.getInt("[%=r.correspondence.name%]")==[%=e.name.toLowerCase()%].getDatabaseID() && rs.getInt("[%=r.name%]")== id)
					return rs.getString(name);
			}
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return null;
	}
	
	[%}}}if(e.database.databasetype.value =2){%]
	public void set[%=r.name.ftuc()%]([%=e.name%] [%=e.name.toLowerCase()%],[%=r.type.name%] [%=r.type.name.toLowerCase()%]){
		MongoCollection<Document> table = mongo_[%=e.database.name%].getCollection("[%=r.name%]_[%=e.name%]");
		Document doc = new Document();
	    doc.put("[%=r.correspondence.name%]", [%=e.name.toLowerCase()%].getDatabaseID());
	    doc.put("[%=r.name%]", [%=r.type.name.toLowerCase()%].getDatabaseID());
		table.insertOne(doc);
	}
	[%if(r.fields.size>0){
	for(f in r.fields){%]
	public void set([%=e.name%] [%=e.name.toLowerCase()%], int id, String name, Object value) {
		MongoCollection<Document> [%=e.name.toLowerCase()%]s = mongo_[%=e.database.name%].getCollection("[%=r.name%]_[%=e.name%]");
		Bson and = Filters.and(Filters.eq("[%=r.correspondence.name%]", [%=e.name.toLowerCase()%].getDatabaseID()), Filters.eq("[%=r.name%]", id));
		[%=e.name.toLowerCase()%]s.updateOne(and, new Document("$set",new Document(name,value)));	
	}
	
	public String get([%=e.name%] [%=e.name.toLowerCase()%], int id, String name) {
		MongoCollection<Document> [%=e.name.toLowerCase()%]s = mongo_[%=e.database.name%].getCollection("[%=r.name%]_[%=e.name%]");
		FindIterable<Document> documents = [%=e.name.toLowerCase()%]s.find();
		for (Document document : documents) {
		    if(document.getInteger("[%=r.correspondence.name%]")==[%=e.name.toLowerCase()%].getDatabaseID() && document.getInteger("[%=r.name%]")==id){
		    	if(document.get(name).getClass().getSimpleName().equals("Date")){
		    		DateFormat format1 = new SimpleDateFormat("yyyy-MM-dd");
					return format1.format(document.get(name));   
		    	}
		    	else
		    		return document.get(name).toString();
		    }
		    	
		}
		return null;
	}
	
	[%}}}}}}%]
	[%for(e in s.entities){
		for(r in e.references){
			if(r.many= false){
				if(e.database.databasetype.value =0){%]
	public [%=r.type.name%] get[%=r.name%]([%=e.name%] element) {
		ResultSet rs =mysql_[%=e.database.name%].findTable("[%=e.name%]");
		try {
			while(rs.next())
			{
				if(rs.getInt("databaseid")==element.getDatabaseID())
				{
					[%=r.type.name%] [%=r.type.name.toLowerCase()%] =new [%=r.type.name%](this);
					[%=r.type.name.toLowerCase()%].setDatabaseID(rs.getInt("[%=r.name%]"));
					return [%=r.type.name.toLowerCase()%];
				}
			}
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return null;
	}
	
	[%}if(e.database.databasetype.value =2){%]
	public [%=r.type.name%] get[%=r.name%]([%=e.name%] element) {
		MongoCollection<Document> table = mongo_[%=e.database.name%].getCollection("[%=e.name%]");
		FindIterable<Document> documents = table.find();
		for (Document document : documents) {
		    if(document.getInteger("databaseid")==element.getDatabaseID()) {
		    	if(document.getInteger("[%=r.name%]")!=null) {
		    	[%=r.type.name%]  [%=r.type.name.toLowerCase()%] = new [%=r.type.name%](this);
		    	[%=r.type.name.toLowerCase()%].setDatabaseID(document.getInteger("[%=r.name%]"));
		    	return [%=r.type.name.toLowerCase()%];
		    	}
		    }
		}
		return null;
	}
	
	[%}}else{
	if(r.correspondence.many = true and r.many =true){
	if(e.database.databasetype.value=0){%]
	public ArrayList<[%=r.type.name%]> get[%=r.name.ftuc()%]([%=e.name%] element) {
		ResultSet rs =mysql_[%=e.database.name%].findTable("[%=r.name%]_[%=e.name%]");
		ArrayList<[%=r.type.name%]> [%=r.type.name.toLowerCase()%]s = new ArrayList<[%=r.type.name%]>();
		try {
			while(rs.next())
			{
				if(rs.getInt("[%=r.correspondence.name%]")==element.getDatabaseID())
				{
					[%=r.type.name%] [%=r.type.name.toLowerCase()%] =new [%=r.type.name%](this);
					[%=r.type.name.toLowerCase()%].setDatabaseID(rs.getInt("[%=r.name%]"));
					[%=r.type.name.toLowerCase()%]s.add([%=r.type.name.toLowerCase()%]);
				}
			}
			return [%=r.type.name.toLowerCase()%]s;
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return null;
	}
	
	[%}if(e.database.databasetype.value =2){%]
	public ArrayList<[%=r.type.name%]> get[%=r.name.ftuc()%]([%=e.name%] element) {
		ArrayList<[%=r.type.name%]> [%=r.type.name.toLowerCase()%]s = new ArrayList<[%=r.type.name%]>();
		MongoCollection<Document> table = mongo_[%=e.database.name%].getCollection("[%=r.name%]_[%=e.name%]");
		FindIterable<Document> documents = table.find();
		for (Document document : documents) { 
		   	if(document.getInteger("[%=r.correspondence.name%]")==element.getDatabaseID()) {
		    	[%=r.type.name%] [%=r.type.name.toLowerCase()%] = new [%=r.type.name%](this);
		    	[%=r.type.name.toLowerCase()%].setDatabaseID(document.getInteger("[%=r.name%]"));
		    	[%=r.type.name.toLowerCase()%]s.add([%=r.type.name.toLowerCase()%]);
		   	} 
		}
		return [%=r.type.name.toLowerCase()%]s;
	}
	
	[%}}else{
	if(r.type.database.databasetype.value=0){%]
	public ArrayList<[%=r.type.name%]> get[%=r.name.ftuc()%]([%=e.name%] element) {
		ResultSet rs =mysql_[%=r.type.database.name%].findTable("[%=r.type.name%]");
		ArrayList<[%=r.type.name%]> [%=r.type.name.toLowerCase()%]s = new ArrayList<[%=r.type.name%]>();
		try {
			while(rs.next())
			{
				if(rs.getInt("[%=r.correspondence.name%]")==element.getDatabaseID()) 
				{
					[%=r.type.name%] [%=r.type.name.toLowerCase()%] =new [%=r.type.name%](this);
					[%=r.type.name.toLowerCase()%].setDatabaseID(rs.getInt("databaseid"));
					[%=r.type.name.toLowerCase()%]s.add([%=r.type.name.toLowerCase()%]);
				}
			}
			return [%=r.type.name.toLowerCase()%]s;
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return null;
	}
	
	[%}if(r.type.database.databasetype.value =2){%]
	public ArrayList<[%=r.type.name%]> get[%=r.name.ftuc()%]([%=e.name%] element) {
		ArrayList<[%=r.type.name%]> [%=r.type.name.toLowerCase()%]s = new ArrayList<[%=r.type.name%]>();
		MongoCollection<Document> table = mongo_[%=r.type.database.name%].getCollection("[%=r.type.name%]");
		FindIterable<Document> documents = table.find();
		for (Document document : documents) {
		    if(document.getInteger("[%=r.correspondence.name%]")!=null) {
		    	if(document.getInteger("[%=r.correspondence.name%]")==element.getDatabaseID()) {
		    	[%=r.type.name%] [%=r.type.name.toLowerCase()%] = new [%=r.type.name%](this);
		    	[%=r.type.name.toLowerCase()%].setDatabaseID(document.getInteger("databaseid"));
		    	[%=r.type.name.toLowerCase()%]s.add([%=r.type.name.toLowerCase()%]);
		    	}
		    }
		}
		return [%=r.type.name.toLowerCase()%]s;
	}
		
	[%}}}}}%]
	[%for(e in s.entities){
	if(e.fields.size>0){%]
	public [%=e.name%] find[%=e.name%]By[%=e.fields[0].name.ftuc()%]([%=e.fields[0].type%] [%=e.fields[0].name.toLowerCase%]){
	[%if(e.database.databasetype.value =0){%]
		ResultSet rs =mysql_[%=e.database.name%].findTable("[%=e.name%]");
		try {
			while(rs.next())
			{	
			[%if(e.fields[0].type="String"){%]
				if(rs.getString("[%=e.fields[0].name%]").equals([%=e.fields[0].name.toLowerCase()%]))
			[%}if(e.fields[0].type="int"){%]
				if(rs.getInt("[%=e.fields[0].name%]")==[%=e.fields[0].name.toLowerCase()%])
			[%}if(e.fields[0].type="double"){%]
				if(rs.getDouble("[%=e.fields[0].name%]")==[%=e.fields[0].name.toLowerCase()%])
			[%}%]	
				{
					[%=e.name%] [%=e.name.toLowerCase()%] =new [%=e.name%](this);
					[%=e.name.toLowerCase()%].setDatabaseID(rs.getInt("databaseid"));
					return [%=e.name.toLowerCase()%];
				}
			}
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		System.out.println("[%=e.name%] [%=e.fields[0].name.ftuc()%] "+ [%=e.fields[0].name.toLowerCase%]+" is not exist");
		return null;
	[%}if(e.database.databasetype.value =2){%]
		MongoCollection<Document> table = mongo_[%=e.database.name%].getCollection("[%=e.name%]");
		FindIterable<Document> documents = table.find();
		for (Document document : documents) {
		if(document.get("[%=e.fields[0].name%]").equals([%=e.fields[0].name.toLowerCase()%])) {
		    	[%=e.name%] [%=e.name.toLowerCase()%] =new [%=e.name%](this);
		    	[%=e.name.toLowerCase()%].setDatabaseID(document.getInteger("databaseid"));
		    	return [%=e.name.toLowerCase()%];
		    }
		}
		System.out.println("[%=e.name%] [%=e.fields[0].name.ftuc()%] "+ [%=e.fields[0].name.toLowerCase%]+" is not exist");
		return null;
		[%}%]
	}
	
	[%}}%]
	[%for(e in s.entities){%]
	public void delete[%=e.name.ftuc()%]([%=e.name%] member) {
		[%=e.name%] [%=e.name.toLowerCase()%] = null;
		[%=e.name.toLowerCase()%] = find[%=e.name%]By[%=e.fields[0].name.ftuc()%](member.get[%=e.fields[0].name.ftuc()%]());
		if([%=e.name.toLowerCase()%]!=null){
		[%for(r in e.references){
		if(r.many = false and r.correspondence.many = false){%]
			set([%=e.name.toLowerCase()%].get[%=r.type.name.ftuc()%](), "[%=r.correspondence.name%]", null);
		[%}if(r.many and r.correspondence.many = false){%]
			for([%=r.type.name%] element : [%=e.name.toLowerCase()%].get[%=r.name.ftuc()%]()){
				set(element, "[%=r.correspondence.name%]", null);
			}
		[%}if(r.many = true and r.correspondence.many = true){
		if(e.database.databasetype.value=0){%]
			mysql_[%=e.database.name%].runSQL("DELETE FROM [%=r.name%]_[%=e.name%] WHERE [%=r.correspondence.name%] ="+ [%=e.name.toLowerCase()%].getDatabaseID());
		[%}if(e.database.databasetype.value=2){%]
			MongoCollection<Document> table_[%=r.name%] = mongo_[%=e.database.name%].getCollection("[%=r.name%]_[%=e.name%]");
			table_[%=r.name%].deleteMany(Filters.eq("[%=r.correspondence.name%]", [%=e.name.toLowerCase()%].getDatabaseID()));
		[%}if(r.type.database.databasetype.value=0){%]
			mysql_[%=r.type.database.name%].runSQL("DELETE FROM [%=r.correspondence.name%]_[%=r.type.name%] WHERE [%=r.correspondence.name%] ="+ [%=e.name.toLowerCase()%].getDatabaseID());
		[%}if(r.type.database.databasetype.value=2){%]
			MongoCollection<Document> table_[%=r.correspondence.name%] = mongo_[%=r.type.database.name%].getCollection("[%=r.correspondence.name%]_[%=r.type.name%]");
			table_[%=r.correspondence.name%].deleteMany(Filters.eq("[%=r.correspondence.name%]", [%=e.name.toLowerCase()%].getDatabaseID()));
		[%}}}
		if(e.database.databasetype.value=0){%]
			mysql_[%=e.database.name%].runSQL("DELETE FROM [%=e.name%] WHERE databaseid ="+ [%=e.name.toLowerCase()%].getDatabaseID());
		[%}if(e.database.databasetype.value=2){%]
			MongoCollection<Document> table = mongo_[%=e.database.name%].getCollection("[%=e.name%]");
			table.deleteOne(Filters.eq("databaseid", [%=e.name.toLowerCase()%].getDatabaseID()));
		[%}%]
		}
	}
	
	[%}%]
	[%for(e in s.entities){
		for(r in e.references){
		if(r.many = true and r.correspondence.many = true){%]
	public void delete[%=r.name.ftuc()%]([%=e.name%] [%=e.name.toLowerCase()%], [%=r.type.name%] [%=r.type.name.toLowerCase()%]) {
		[%if(e.database.databasetype.value=0){%]
		mysql_[%=e.database.name%].runSQL("DELETE FROM [%=r.name%]_[%=e.name%] WHERE [%=r.name%] ="+ [%=e.name.toLowerCase()%].getDatabaseID() +" and [%=r.correspondence.name%] ="+ [%=r.type.name.toLowerCase()%].getDatabaseID());			
		[%}if(e.database.databasetype.value=2){%]
		MongoCollection<Document> table = mongo_[%=e.database.name%].getCollection("[%=r.name%]_[%=e.name%]");
		Document query = new Document("$and", Arrays.asList(new Document("[%=r.name%]", [%=e.name.toLowerCase()%].getDatabaseID()), new Document("[%=r.correspondence.name%]", [%=r.type.name.toLowerCase()%].getDatabaseID())));
		table.deleteOne(query);
		[%}%]
	}
	
	[%}}}%]
}

				
	[% 
	operation my(s :String):String {
		if(s="String")
			return "varchar(255)";
		if(s="int")
			return "int";
		if(s="double")
			return "double";
		if(s = "Date")
		 	return "Date";
		else
		  	return "i don't have this type yet";
	}
	%]
	


