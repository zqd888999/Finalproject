package schema;

import java.util.ArrayList;
import java.util.Date;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.text.ParseException;

public class [%=e.name%]{
	
	protected int id;
	protected PolyglotDatabase db;
	
	public [%=e.name%](PolyglotDatabase db){
		this.db = db;
	}
	
	public void setID(int id) {
		this.id=id;
		
	}
	
	public int getID() {
		return id;
	}
	
	[%for (r in e.references) {
		var find = false;
		if(r.many=false){%]
	public [%=r.type.name%] get[%=r.name.ftuc()%](){
		return db.get[%=r.name%](this);
	}
	
	public void set[%=r.name.ftuc()%]([%=r.type.name%] element){
		[%if(r.correspondence.many = false){%]
		if(this.get[%=r.name.ftuc()%]()==null) {
			db.set(this, "[%=r.name%]", element.getID());
			element.set[%=e.name.ftuc()%](this);
		}
		else{
			if(this.get[%=r.name.ftuc()%]().getID()!=element.getID()) {
				db.set(this.get[%=r.name.ftuc()%](), "[%=e.name%]", null);
				db.set(this, "[%=r.name%]", element.getID());
				element.set[%=e.name.ftuc()%](this);
			}
		}
		[%}else{%]
		db.set(this, "[%=r.name%]", element.getID());
		[%}%]
	}
	
	[%}else{if(r.correspondence.many = true){%]
	public void add[%=r.name.ftuc()%]([%=r.type.name%] element){
		boolean exist = false;
		for([%=r.type.name%] member: get[%=r.name.ftuc()%]())
			if(member.getID()==element.getID())
				exist =true;
		if(!exist){
			db.set[%=r.name.ftuc()%](this , element);
			db.set[%=r.correspondence.name.ftuc()%](element, this);
		}		
			
	}
	
	public ArrayList<[%=r.type.name%]> get[%=r.name.ftuc()%](){
		return db.get[%=r.name.ftuc()%](this);
	}
	
	public void delete[%=r.name.ftuc()%]([%=r.type.name%] element){
		db.delete[%=r.name.ftuc()%](this , element);
	}
	
	[%if(r.type.fields.size>0){%]
	public [%=r.type.name%] Find[%=r.name%]([%=r.type.fields[0].type%] [%=r.type.fields[0].name.toLowerCase()%]) {
		for([%=r.type.name%] element: get[%=r.name.ftuc()%]()) {
			[%if(r.type.fields[0].type="String"){%]
			if(element.get[%=r.type.fields[0].name.ftuc()%]().equals([%=r.type.fields[0].name.toLowerCase()%]))
			[%}else{%]	
			if(element.get[%=r.type.fields[0].name.ftuc()%]()==[%=r.type.fields[0].name.toLowerCase()%])
			[%}%]	
				return element;
		}
		return null;
	}

	[%}%]
	[%}else{%]
	public void add[%=r.name.ftuc()%]([%=r.type.name%] element){
		boolean exist = false;
		for([%=r.type.name%] member: get[%=r.name.ftuc()%]())
			if(member.getID()==element.getID())
				exist =true;
		if(!exist)
			element.set[%=r.correspondence.name.ftuc()%](this);
	}
	
	public ArrayList<[%=r.type.name%]> get[%=r.name.ftuc()%](){
		return db.get[%=r.name.ftuc()%](this);
	}
	
	public [%=r.type.name%] Find[%=r.name%]([%=r.type.fields[0].type%] [%=r.type.fields[0].name.toLowerCase()%]) {
		for([%=r.type.name%] element: get[%=r.name.ftuc()%]()) {
			[%if(r.type.fields[0].type="String"){%]
			if(element.get[%=r.type.fields[0].name.ftuc()%]().equals([%=r.type.fields[0].name.toLowerCase()%]))
			[%}else{%]	
			if(element.get[%=r.type.fields[0].name.ftuc()%]()==[%=r.type.fields[0].name.toLowerCase()%])
			[%}%]
				return element;
		}
		return null;
	}

	[%}}}%]
	[%for (f in e.fields) { %]
	public [%=f.type%] get[%=f.name.ftuc()%]() {
		[%if(f.type= "int"){%]
		return Integer.parseInt(db.get(this,"[%=f.name%]"));
		[%}if(f.type= "double"){%]
		return Double.valueOf(db.get(this,"[%=f.name%]"));
		[%}if(f.type= "String"){%]
		return db.get(this,"[%=f.name%]");
		[%}if(f.type= "Date"){%]
		Date date = null;    
		String str = db.get(this,"[%=f.name%]");
		DateFormat format1 = new SimpleDateFormat("yyyy-MM-dd");      
		try {    
           date = format1.parse(str);   
		} catch (ParseException e) {    
           e.printStackTrace();    
		}   
		return date;
		[%}%]
	}
	
	public void set[%=f.name.ftuc()%]([%=f.type%] [%=f.name%]) {
		db.set(this,"[%=f.name%]",[%=f.name%]);
	}
	
	[%}%]
}	

[%operation loopReference(e:Entity, r:Reference):Boolean{
	for(r1 in r.type.references){
		if(e.name = r.type.name and r.type.name= r1.type.name and (r.many=true and r.correspondence.many = false) and (r1.many = true and r1.correspondence.many = false))
			return true;
	}
	return false;
}%]
	
